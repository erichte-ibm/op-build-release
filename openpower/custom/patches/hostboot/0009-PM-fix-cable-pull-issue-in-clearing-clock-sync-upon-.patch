From 17ac02e00d658c497a237b1c29d718f7aac37ed9 Mon Sep 17 00:00:00 2001
From: Greg Still <stillgs@us.ibm.com>
Date: Fri, 15 Feb 2019 17:03:22 -0600
Subject: [PATCH 1/3] PM: fix cable pull issue in clearing clock sync upon PM
 Complex Reset

- Don't clear CACCR[15] (clock sync enable); allow it to be fully managed
  by STOP entry/exit in CME Hcode.

  Key_Cronus_Test=PM_REGRESS

Change-Id: I92cc74043b8aefd7351ff765083de703675b8a39
CQ: SW453649
Reviewed-on: http://rchgit01.rchland.ibm.com/gerrit1/72131
Tested-by: Jenkins Server <pfd-jenkins+hostboot@us.ibm.com>
Tested-by: Hostboot CI <hostboot-ci+hostboot@us.ibm.com>
Reviewed-by: Jennifer A. Stofer <stofer@us.ibm.com>
Reviewed-on: http://rchgit01.rchland.ibm.com/gerrit1/72145
Tested-by: Jenkins OP Build CI <op-jenkins+hostboot@us.ibm.com>
Tested-by: Jenkins OP HW <op-hw-jenkins+hostboot@us.ibm.com>
Reviewed-by: Daniel M. Crowell <dcrowell@us.ibm.com>
---
 .../procedures/hwp/pm/p9_pm_corequad_init.C   | 22 +++++++++----------
 1 file changed, 11 insertions(+), 11 deletions(-)

diff --git a/src/import/chips/p9/procedures/hwp/pm/p9_pm_corequad_init.C b/src/import/chips/p9/procedures/hwp/pm/p9_pm_corequad_init.C
index dc5dcd7fe..3d6bd4728 100644
--- a/src/import/chips/p9/procedures/hwp/pm/p9_pm_corequad_init.C
+++ b/src/import/chips/p9/procedures/hwp/pm/p9_pm_corequad_init.C
@@ -5,7 +5,7 @@
 /*                                                                        */
 /* OpenPOWER HostBoot Project                                             */
 /*                                                                        */
-/* Contributors Listed Below - COPYRIGHT 2016,2018                        */
+/* Contributors Listed Below - COPYRIGHT 2016,2019                        */
 /* [+] International Business Machines Corp.                              */
 /*                                                                        */
 /*                                                                        */
@@ -586,7 +586,7 @@ fapi2::ReturnCode pm_corequad_reset(
         uint16_t l_qaccr_value = 0;
         uint16_t l_caccr_value = 0;
         l_address = EQ_QPPM_QACCR;
-        uint8_t l_caccr_bit_13_14_15_value = 0;
+        uint8_t l_caccr_bit_13_14_value = 0;
         FAPI_TRY(fapi2::getScom(l_quad_chplt, l_address, l_quad_data64),
                  "ERROR: Failed to read EQ_QPPM_QACCR");
 
@@ -617,7 +617,7 @@ fapi2::ReturnCode pm_corequad_reset(
                     FAPI_TRY(fapi2::getScom(l_core_chplt, l_address, l_core_data64),
                              "ERROR: Failed to read C_CPPM_CACCR");
 
-                    //extract 0:11 bits data
+                    //extract 0:11 (SB_STRENGH, PULSE_MODE, SW VALUE)
                     l_core_data64.extract<C_CPPM_CACCR_CLK_SB_STRENGTH,
                                           C_CPPM_CACCR_CLK_SW_SPARE>(l_caccr_value);
 
@@ -636,15 +636,15 @@ fapi2::ReturnCode pm_corequad_reset(
                     }
                     else
                     {
-                        //extract 13:14:15 bits
+                        //extract 13:14 (SB OVERRIDE, SW OVERRIDE)
                         l_core_data64.
-                        extractToRight<C_CPPM_CACCR_QUAD_CLK_SB_OVERRIDE, 3>(l_caccr_bit_13_14_15_value);
+                        extractToRight<C_CPPM_CACCR_QUAD_CLK_SB_OVERRIDE, 2>(l_caccr_bit_13_14_value);
 
-                        if (l_caccr_bit_13_14_15_value)
+                        if (l_caccr_bit_13_14_value)
                         {
                             //Clear override bits
-                            l_core_data64.insert<C_CPPM_CACCR_QUAD_CLK_SB_OVERRIDE, 3>(0);
-                            FAPI_TRY(fapi2::putScom(l_core_chplt, l_address, l_core_data64),
+                            l_core_data64.flush<0>().setBit<13, 2>();
+                            FAPI_TRY(fapi2::putScom(l_core_chplt, C_CPPM_CACCR_CLEAR, l_core_data64),
                                      "ERROR: Failed to write C_CPPM_CACCR");
                         }
 
@@ -836,9 +836,9 @@ fapi2::ReturnCode pm_disable_resclk(
             }
 
             // By default clear override bits before QACCR is updated
-            //bit 13:14:15
-            l_core_data64.insert<C_CPPM_CACCR_QUAD_CLK_SB_OVERRIDE, 3>(0);
-            FAPI_TRY(fapi2::putScom(l_core_chplt, l_address, l_core_data64),
+            // bit 13:14
+            l_core_data64.flush<0>().setBit<13, 2>();
+            FAPI_TRY(fapi2::putScom(l_core_chplt, C_CPPM_CACCR_CLEAR, l_core_data64),
                      "ERROR: Failed to write C_CPPM_CACCR");
 
         } //end of core list
-- 
2.21.0.windows.1

