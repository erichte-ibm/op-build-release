From 867f6c393415d65b343f72bac1bcf0002be7b291 Mon Sep 17 00:00:00 2001
From: Dean Sanner <dsanner@us.ibm.com>
Date: Fri, 8 Feb 2019 06:58:44 -0600
Subject: [PATCH 2/3] Find cpu struct directly in doorbell interrupt handler

This fix accesses the cpu struct based on current thread
PIR instead of relying on an indirect pointer in the
current task struct.  It is attempting to eliminate a
weak consistency/timing issue on the thread wakeups on
the secondary cores.

Given the way hostboot wakes up from the doorbell, there
is a good chunck of code executed prior to the doorbell
interrupt handler --> this also adds a msgsync instruction
in the sreset (0x100) interrupt handler.

Change-Id: I23db1d786a8a8f0637a890e2ac5de6197ee9cabb
Reviewed-on: http://rchgit01.rchland.ibm.com/gerrit1/71594
Tested-by: Jenkins Server <pfd-jenkins+hostboot@us.ibm.com>
Tested-by: Jenkins OP Build CI <op-jenkins+hostboot@us.ibm.com>
Tested-by: Jenkins OP HW <op-hw-jenkins+hostboot@us.ibm.com>
Reviewed-by: Daniel M. Crowell <dcrowell@us.ibm.com>
---
 src/kernel/start.S   | 6 +++++-
 src/kernel/syscall.C | 9 +++++----
 2 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/src/kernel/start.S b/src/kernel/start.S
index 1e2b53cd6..d4163586f 100644
--- a/src/kernel/start.S
+++ b/src/kernel/start.S
@@ -5,7 +5,7 @@
 #
 # OpenPOWER HostBoot Project
 #
-# Contributors Listed Below - COPYRIGHT 2010,2018
+# Contributors Listed Below - COPYRIGHT 2010,2019
 # [+] International Business Machines Corp.
 # [+] Joel Stanley
 #
@@ -601,6 +601,10 @@ intvect_system_reset:
     ;// Raise priority to high.
     or 2,2,2
 
+    ;// Need to send a msgysnc to prevent weak consistency issues
+    ;// with doorbells (they execute this path prior to dbell intr)
+    .long 0x7C0006EC
+
     ;// Free up two registers temporarily.
     mtsprg0 r1
     mtsprg1 r2
diff --git a/src/kernel/syscall.C b/src/kernel/syscall.C
index 7664379a1..85c331960 100644
--- a/src/kernel/syscall.C
+++ b/src/kernel/syscall.C
@@ -67,19 +67,20 @@ void kernel_execute_hype_doorbell()
     doorbell_clear();
 
     //Execute all work items on doorbell_actions stack
-    KernelWorkItem *l_work = t->cpu->doorbell_actions.pop();
-    while(l_work != NULL)
+    cpu_t* l_cpu = CpuManager::getCurrentCPU();
+    KernelWorkItem *l_work = l_cpu->doorbell_actions.pop();
+    while(l_work != nullptr)
     {
         //Execute Work Item and then delete it
         (*l_work)();
         delete l_work;
-        l_work = t->cpu->doorbell_actions.pop();
+        l_work = l_cpu->doorbell_actions.pop();
     }
 
     //IPC messages come in only on the master, so
     //If this is a doorbell to the master -- check
     cpu_t* master = CpuManager::getMasterCPU();
-    if(t->cpu == master)
+    if(l_cpu == master)
     {
         size_t pir = getPIR();
         printk("IPC msg pir %lx incoming\n", pir);
-- 
2.21.0.windows.1

